DEF_CMD_(EXIT, -100, 0, {})
DEF_CMD_(ADD, 1, 0, { stack_push(stack, stack_pop(stack) + stack_pop(stack)); })
DEF_CMD_(SUB, 2, 0, { stack_push(stack, stack_pop(stack) - stack_pop(stack)); })
DEF_CMD_(MUL, 3, 0, { stack_push(stack, stack_pop(stack) * stack_pop(stack)); })
DEF_CMD_(DIV, 4, 0, { stack_push(stack, stack_pop(stack) / stack_pop(stack)); })
DEF_CMD_(PUSH, 5, 2, {})
DEF_CMD_(PUSH_N, 6, 0, {})
DEF_CMD_(PUSH_R, 7, 0, {})
DEF_CMD_(POP, 8, 1, {})
DEF_CMD_(OUT, 9, 1, {})
DEF_CMD_(IN, 10, 1, {})
DEF_CMD_(JMP, 11, -1, {})
DEF_CMD_(JA, 12, -1, {})
DEF_CMD_(JAE, 13, -1, {})
DEF_CMD_(JB, 14, -1, {})
DEF_CMD_(JBE, 15, -1, {})
DEF_CMD_(JE, 16, -1, {})
DEF_CMD_(JNE, 17, -1, {})
DEF_CMD_(CALL, 18, -1, {})
DEF_CMD_(RET, 19, -1, {})